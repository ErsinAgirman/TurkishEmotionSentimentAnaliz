# -*- coding: utf-8 -*-
"""SentimentAnaliz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7gFdERp33W2jHED-AC-lOdu1vgrVIy5
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import re
import pandas as pd
import nltk
nltk.download('stopwords')
import pickle
from nltk.corpus import stopwords
stopWords = set(stopwords.words('turkish'))
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')

df_train = pd.read_csv('/content/drive/MyDrive/YapayZeka/train.csv', encoding= 'unicode_escape')
df_test = pd.read_csv('/content/drive/MyDrive/YapayZeka/test.csv', encoding= 'unicode_escape')

def pre_processing(text):
    text = text.lower()  # Büyük harften küçük harfe çevir
    text = re.sub("[^abcçdefgğhıijklmnoöprsştuüvyz]", " ", text)
    text = nltk.word_tokenize(text)
    text = [word for word in text if not word in stopWords]
    lemma = nltk.WordNetLemmatizer()
    text = [lemma.lemmatize(word) for word in text]
    text = " ".join(text)
    return text

df_train["clean_text"] = df_train["comment"].apply(lambda x: pre_processing(x))
df_test["clean_text"] = df_test["comment"].apply(lambda x: pre_processing(x))

X_train = df_train["clean_text"]
X_test = df_test["clean_text"]
y_train = df_train["Label"]
y_test = df_test["Label"]

print("x_train", X_train.shape)
print("x_test", X_test.shape)
print("y_train", y_train.shape)
print("y_test", y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer

# Modeli oluştur ve eğit
model = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LogisticRegression())])
model.fit(X_train, y_train)

# Modeli kaydet
with open('/content/drive/MyDrive/YapayZeka/logistic_regression_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import cross_val_score

def plot_confusion_matrix(Y_test, Y_preds):
    conf_mat = confusion_matrix(Y_test, Y_preds)
    fig = plt.figure(figsize=(6,6))
    plt.matshow(conf_mat, cmap=plt.cm.Blues, fignum=1)
    plt.yticks(range(2), range(2))
    plt.xticks(range(2), range(2))
    plt.colorbar()
    for i in range(2):
        for j in range(2):
            plt.text(i-0.2, j+0.1, str(conf_mat[j, i]), color='tab:red')

cv_scores = cross_val_score(model, X_train, y_train, cv=10)
print("CV average score: %.2f" % cv_scores.mean())

result = model.predict(X_test)
cr = classification_report(y_test, result)
print(cr)

print('Train Accuracy : %.3f' % model.score(X_train, y_train))
print('Test Accuracy : %.3f' % model.score(X_test, y_test))

y_pred = model.predict(X_test)
print(precision_score(y_test, y_pred, average='macro'), ": is the precision score")
print(recall_score(y_test, y_pred, average='macro'), ": is the recall score")
print(f1_score(y_test, y_pred, average='macro'), ": is the f1 score")

plot_confusion_matrix(y_test, model.predict(X_test))

from bs4 import BeautifulSoup

html_content = """
<div class="comment-content">
    <p>Bu film çok güzeldi, kesinlikle tavsiye ederim!</p>
</div>
<div class="comment-content">
    <p>Kötü oyunculuk, senaryo zayıf, beğenmedim.</p>
</div>
<div class="comment-content">
    <p>Mükemmel bir film, tekrar izleyeceğim!</p>
</div>
"""

soup = BeautifulSoup(html_content, 'html.parser')

comment_list = []
comments = soup.find_all("div", {"class": "comment-content"})

for comment in comments:
    comment_text = comment.find("p").text.strip()
    comment_list.append(comment_text)

# Çekilen yorumları ekrana yazdırma
for comment in comment_list:
    print(comment)

# Modeli yükleme
with open('/content/drive/MyDrive/YapayZeka/logistic_regression_model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

# Yorumları işleyerek duygu analizi yapma
for comment in comment_list:
    processed_comment = pre_processing(comment)
    prediction = model.predict([processed_comment])
    probability = model.predict_proba([processed_comment])

    if prediction[0] == 1:
        print(comment, " is Positive with probability:", probability[0][1])
    else:
        print(comment, " is Negative with probability:", probability[0][0])

# Manuel metin analizi
manuel_metin = input("Lütfen duygu analizi yapmak istediğiniz metni girin: ")

# Metnin duygu analizini yap
processed_manuel_metin = pre_processing(manuel_metin)
prediction = model.predict([processed_manuel_metin])
probability = model.predict_proba([processed_manuel_metin])

# Duygu analizinin sonuçlarını yazdır
if prediction[0] == 1:
    print("Girdiğiniz metin Pozitif duygu içeriyor. Olasılık: ", probability[0][1])
else:
    print("Girdiğiniz metin Negatif duygu içeriyor. Olasılık: ", probability[0][0])



from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline

# KNN Modeli oluşturma
knn_model = Pipeline([('tfidf', TfidfVectorizer()), ('clf', KNeighborsClassifier(n_neighbors=5))])

# Modeli eğitme
knn_model.fit(X_train, y_train)

# Çapraz doğrulama skoru
cv_scores_knn = cross_val_score(knn_model, X_train, y_train, cv=10)
print("KNN CV average score: %.2f" % cv_scores_knn.mean())

# Test verileri üzerinde tahmin yapma
y_pred_knn = knn_model.predict(X_test)

# Değerlendirme metrikleri
print("KNN Classification Report:\n", classification_report(y_test, y_pred_knn))
print('KNN Train Accuracy : %.3f' % knn_model.score(X_train, y_train))
print('KNN Test Accuracy : %.3f' % knn_model.score(X_test, y_test))
print(precision_score(y_test, y_pred_knn, average='macro'), ": is the precision score")
print(recall_score(y_test, y_pred_knn, average='macro'), ": is the recall score")
print(f1_score(y_test, y_pred_knn, average='macro'), ": is the f1 score")

# Karışıklık Matrisi Görselleştirmesi
def plot_confusion_matrix(Y_test, Y_preds):
    conf_mat = confusion_matrix(Y_test, Y_preds)
    fig = plt.figure(figsize=(6,6))
    plt.matshow(conf_mat, cmap=plt.cm.Blues, fignum=1)
    plt.yticks(range(2), range(2))
    plt.xticks(range(2), range(2))
    plt.colorbar()
    for i in range(2):
        for j in range(2):
            plt.text(i-0.2, j+0.1, str(conf_mat[j, i]), color='tab:red')

plot_confusion_matrix(y_test, y_pred_knn)
plt.show()

# Yorumları işleyerek duygu analizi yapma
print("\nKNN Model ile Yorum Analizi Sonuçları:\n")
for comment in comment_list:
    processed_comment = pre_processing(comment)
    prediction = knn_model.predict([processed_comment])
    probability = knn_model.predict_proba([processed_comment])

    if prediction[0] == 1:
        print(comment, " is Positive with probability:", probability[0][1])
    else:
        print(comment, " is Negative with probability:", probability[0][0])

# Manuel metin analizi
manuel_metin = input("Lütfen duygu analizi yapmak istediğiniz metni girin: ")

# Metnin duygu analizini yap
processed_manuel_metin = pre_processing(manuel_metin)
prediction = knn_model.predict([processed_manuel_metin])
probability = knn_model.predict_proba([processed_manuel_metin])

# Duygu analizinin sonuçlarını yazdır
if prediction[0] == 1:
    print("Girdiğiniz metin Pozitif duygu içeriyor. Olasılık: ", probability[0][1])
else:
    print("Girdiğiniz metin Negatif duygu içeriyor. Olasılık: ", probability[0][0])